(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.solidityToABI = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// build inputs or outputs array from raw inputs string
function buildInputsArray(rawInputsString) {
  var returnArray = []; // eslint-disable-line
  var rawMethodInputs = rawInputsString.split(',');

  // no inputs
  if (typeof rawMethodInputs === 'undefined' || rawMethodInputs.length === 0) {
    return [];
  }

  rawMethodInputs.forEach(function (rawMethodInput) {
    var inputData = rawMethodInput.trim().split(' ');
    var type = inputData[0];
    var indexed = inputData.length === 3 && inputData.indexOf('indexed') !== -1;
    var name = indexed ? inputData[2] || '' : inputData[1] || '';

    // if type exists
    if (type !== '' && typeof type !== 'undefined') {
      returnArray.push(Object.assign(indexed ? { indexed: indexed } : {}, {
        type: type,
        name: name
      }));
    }
  });

  return returnArray;
}

// parse a solidity method interface
function solidityToABI(methodInterface) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  // count open and clsoed
  var methodABIObject = {};

  // not a string
  if (typeof methodInterface !== 'string') {
    throw new Error('Method interface must be a string, currently ' + (typeof methodInterface === 'undefined' ? 'undefined' : _typeof(methodInterface)));
  }

  // empty string
  if (methodInterface.length === 0) {
    throw new Error('Solidity method interface must have a length greater than zero, currently ' + methodInterface.length);
  }

  // count open brackets, closed brackets, colon count, outpouts and invalid characters
  var openBrackets = (methodInterface.match(/\(/g) || []).length;
  var closedBrackets = (methodInterface.match(/\)/g) || []).length;
  var colonCount = (methodInterface.match(/:/g) || []).length;
  var hasOutputs = openBrackets === 2 && closedBrackets === 2 && colonCount === 1;
  var hasInvalidCharacters = methodInterface.replace(/([A-Za-z0-9\_\s\,\:(\)]+)/g, '').trim().length > 0; // eslint-disable-line

  // invalid characters
  if (hasInvalidCharacters) {
    throw new Error('Invalid Solidity method interface, your method interface contains invalid chars. Only letters, numbers, spaces, commas, underscores, brackets and colons.');
  }

  // method ABI object assembly
  methodABIObject.name = methodInterface.slice(0, methodInterface.indexOf('('));
  methodABIObject.type = options.type || 'function';

  // add payable
  if (methodABIObject.type === 'function') {
    methodABIObject.payable = options.payable || false;
  }

  // constant
  methodABIObject.constant = options.constant || true;
  var methodInputsString = methodInterface.slice(methodInterface.indexOf('(') + 1, methodInterface.indexOf(')')).trim();
  var methodOutputString = (hasOutputs && methodInterface.slice(methodInterface.lastIndexOf('(') + 1, methodInterface.lastIndexOf(')')) || '').trim();
  methodABIObject.inputs = buildInputsArray(methodInputsString);
  methodABIObject.outputs = buildInputsArray(methodOutputString);

  // check open brackets
  if (methodABIObject.name === '' || typeof methodABIObject.name === 'undefined') {
    throw new Error('Invalid Solidity method interface, no method name');
  }

  // check open brackets
  if (openBrackets !== 1 && openBrackets !== 2) {
    throw new Error('Invalid Solidity method interface, too many or too little open brackets in solidity interface, currenlty only ' + openBrackets + ' open brackets!');
  }

  // check open brackets
  if (openBrackets !== 1 && openBrackets !== 2) {
    throw new Error('Invalid Solidity method interface, too many or too little open brackets in solidity interface!');
  }

  // check closed brackets
  if (closedBrackets !== 1 && closedBrackets !== 2) {
    throw new Error('Invalid Solidity method interface, too many or too little closed brackets in solidity interface!');
  }

  // check colon count
  if (colonCount !== 0 && colonCount !== 1) {
    throw new Error('Invalid Solidity method interface, to many or too little colons.');
  }

  // return method abi object
  return methodABIObject;
}

// module export
module.exports = solidityToABI;

},{}]},{},[1])(1)
});